name: Cancel Vercel Deployments

on:
  push:
    branches:
      - main

jobs:
  cancel_deployments:
    runs-on: ubuntu-latest
    steps:
      - name: Check if commit message contains "Edited with TinaCMS"
        id: check_commit_message
        run: |
          if git log --name-only --pretty=format:"%s" -n 1 ${{ github.sha }} | grep -q "Edited with TinaCMS"; then
            echo "::set-output name=message::Commit message contains 'Edited with TinaCMS'"
          else
            echo "::set-output name=message::Commit message does not contain 'Edited with TinaCMS'"
            exit 1
          fi
      - name: Check for Building Deployments
        id: check_deployments
        run: |
          const fetch = require('node-fetch');

          async function checkDeployments() {
            const response = await fetch('https://api.vercel.com/v6/deployments', {
              headers: {
                Authorization: `Bearer ${process.env.VERCEL_API_SECRET}`
              }
            });
            const data = await response.json();
            const buildingDeployments = data.deployments.filter(deployment => deployment.state === 'BUILDING');
            return buildingDeployments.length > 0;
          }

          checkDeployments().then(result => {
            console.log(`::set-output name=building_deployments::${result}`);
          }).catch(error => {
            console.error(error);
            process.exit(1);
          });
        env:
          VERCEL_API_SECRET: ${{ secrets.VERCEL_API_SECRET }}
      - name: Cancel Deployments
        if: steps.check_commit_message.outputs.message == 'Commit message contains \'Edited with TinaCMS\'' && steps.check_deployments.outputs.building_deployments == 'true'
        run: |
          const fetch = require('node-fetch');

          async function cancelDeployments() {
            const response = await fetch('https://api.vercel.com/v6/deployments', {
              headers: {
                Authorization: `Bearer ${process.env.VERCEL_API_SECRET}`
              }
            });
            const data = await response.json();
            const deploymentIds = data.deployments.filter(deployment => deployment.state === 'BUILDING').map(deployment => deployment.id);
            for (const id of deploymentIds) {
              await fetch(`https://api.vercel.com/v6/deployments/${id}`, {
                method: 'PATCH',
                headers: {
                  Authorization: `Bearer ${process.env.VERCEL_API_SECRET}`,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ state: 'CANCELLED' })
              });
            }
          }

          cancelDeployments().catch(error => {
            console.error(error);
            process.exit(1);
          });
        env:
          VERCEL_API_SECRET: ${{ secrets.VERCEL_API_SECRET }}
